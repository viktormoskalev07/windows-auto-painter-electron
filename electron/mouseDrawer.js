import { exec } from "child_process";
import { screen } from "electron";

let isDrawing = false;
let interval = null;
let currentMonitor = null; // –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫—É—Ä—Å–æ—Ä–∞.
 */
function getCursorPosition() {
    const cursor = screen.getCursorScreenPoint();
    const display = screen.getDisplayNearestPoint(cursor);

    currentMonitor = display.id; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–æ–Ω–∏—Ç–æ—Ä
    const scaleFactor = display.scaleFactor || 1;

    console.log(`üñ•Ô∏è Active Monitor ID: ${display.id}, DPI Scale: ${scaleFactor}`);

    return {
        x: (cursor.x - display.bounds.x) * scaleFactor,
        y: (cursor.y - display.bounds.y) * scaleFactor,
        scaleFactor,
        display,
    };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø–µ—Ä–µ—à—ë–ª –ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞ –¥—Ä—É–≥–æ–π –º–æ–Ω–∏—Ç–æ—Ä.
 */
function checkMonitorChange() {
    const cursor = screen.getCursorScreenPoint();
    const display = screen.getDisplayNearestPoint(cursor);

    if (display.id !== currentMonitor) {
        console.log(`üîÑ Monitor changed! New Monitor ID: ${display.id}`);
        currentMonitor = display.id;
        return getCursorPosition(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ scaleFactor
    }
    return null;
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É—á—ë—Ç–æ–º DPI –∫–∞–∂–¥–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞.
 */
export function startDrawing(points) {
    if (isDrawing) return;

    let { x: startX, y: startY, scaleFactor } = getCursorPosition();


    isDrawing = true;
    let index = 0;

    interval = setInterval(() => {
        if (!isDrawing || index >= points.length) {
            stopDrawing();
            return;
        }

        const { x, y } = points[index];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –º–æ–Ω–∏—Ç–æ—Ä–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        const newMonitor = checkMonitorChange();
        if (newMonitor) {
            startX = newMonitor.x;
            startY = newMonitor.y;
            scaleFactor = newMonitor.scaleFactor;
        }

        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ nircmd.exe
        const adjX = Math.round((startX + x) / scaleFactor);
        const adjY = Math.round((startY + y) / scaleFactor);

        console.log(`üéØ Adjusted coords: x=${adjX}, y=${adjY} (Monitor: ${currentMonitor})`);

        exec(`nircmd.exe setcursor ${adjX} ${adjY}`);

        if (index % 5 === 0) {
            exec("nircmd.exe sendmouse left down");
            exec("nircmd.exe sendmouse left up");
        }

        index++;
    }, 50);
}

/**
 * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏–µ.
 */
export function stopDrawing() {
    if (interval) {
        clearInterval(interval);
        interval = null;
    }
    isDrawing = false;
    console.log("üõë Drawing stopped!");
}
